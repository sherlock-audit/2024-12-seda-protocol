// Code generated by MockGen. DO NOT EDIT.
// Source: app/utils/seda_keys.go
//
// Generated by this command:
//
//	mockgen -source=app/utils/seda_keys.go -package testutil -destination=app/abci/testutil/seda_keys_mock.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	utils "github.com/sedaprotocol/seda-chain/app/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockSEDASigner is a mock of SEDASigner interface.
type MockSEDASigner struct {
	ctrl     *gomock.Controller
	recorder *MockSEDASignerMockRecorder
}

// MockSEDASignerMockRecorder is the mock recorder for MockSEDASigner.
type MockSEDASignerMockRecorder struct {
	mock *MockSEDASigner
}

// NewMockSEDASigner creates a new mock instance.
func NewMockSEDASigner(ctrl *gomock.Controller) *MockSEDASigner {
	mock := &MockSEDASigner{ctrl: ctrl}
	mock.recorder = &MockSEDASignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSEDASigner) EXPECT() *MockSEDASignerMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockSEDASigner) Sign(input []byte, index utils.SEDAKeyIndex) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", input, index)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSEDASignerMockRecorder) Sign(input, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSEDASigner)(nil).Sign), input, index)
}
