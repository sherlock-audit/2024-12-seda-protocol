syntax = "proto3";
package sedachain.tally.v1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/tally/types";

// Params defines the parameters for the tally module.
message Params {
  // MaxTallyGasLimit is the maximum gas limit for a tally request.
  uint64 max_tally_gas_limit = 1;
  // FilterGasCostNone is the gas cost for a filter type none.
  uint64 filter_gas_cost_none = 2;
  // FilterGasCostMultiplierMode is the gas cost multiplier for a filter type
  // mode.
  uint64 filter_gas_cost_multiplier_mode = 3;
  // FilterGasCostMultiplierStdDev is the gas cost multiplier for a filter type
  // stddev.
  uint64 filter_gas_cost_multiplier_std_dev = 4;
  // GasCostBase is the base gas cost for a data request.
  uint64 gas_cost_base = 5;
  // GasCostFallback is the gas cost incurred for data request execution when
  // even basic consensus has not been reached.
  uint64 execution_gas_cost_fallback = 6;
  // BurnRatio is the ratio of the gas cost to be burned in case of reduced
  // payout scenarios.
  string burn_ratio = 7 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (amino.dont_omitempty) = true,
    (gogoproto.nullable) = false
  ];
  // MaxResultSize is the maximum size of the result of a data request in bytes.
  uint32 max_result_size = 8;
  // MaxTalliesPerBlock specifies the maximum number of tallies per block.
  uint32 max_tallies_per_block = 9;
}
