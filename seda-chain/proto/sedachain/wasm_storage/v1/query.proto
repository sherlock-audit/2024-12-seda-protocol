syntax = "proto3";
package sedachain.wasm_storage.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sedachain/wasm_storage/v1/wasm_storage.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/wasm-storage/types";

// Query defines the gRPC querier service.
service Query {
  // OracleProgram returns an oracle program given its hash.
  rpc OracleProgram(QueryOracleProgramRequest)
      returns (QueryOracleProgramResponse) {
    option (google.api.http).get =
        "/seda-chain/wasm-storage/oracle_program/{hash}";
  }

  // OraclePrograms returns all oracle programs.
  rpc OraclePrograms(QueryOracleProgramsRequest)
      returns (QueryOracleProgramsResponse) {
    option (google.api.http).get = "/seda-chain/wasm-storage/oracle_programs";
  }

  // CoreContractRegistry returns the Core Contract Registry address.
  rpc CoreContractRegistry(QueryCoreContractRegistryRequest)
      returns (QueryCoreContractRegistryResponse) {
    option (google.api.http).get =
        "/seda-chain/wasm-storage/core_contract_registry";
  }

  // Params returns the total set of wasm-storage parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/seda-chain/wasm-storage/params";
  }
}

// The request message for QueryOracleProgram RPC.
message QueryOracleProgramRequest { string hash = 1; }

// The response message for QueryOracleProgram RPC.
message QueryOracleProgramResponse { OracleProgram oracle_program = 1; }

// The request message for QueryOraclePrograms RPC.
message QueryOracleProgramsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// The response message for QueryOraclePrograms RPC.
message QueryOracleProgramsResponse {
  repeated string list = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// The request message for QueryCoreContractRegistry RPC.
message QueryCoreContractRegistryRequest {}

// The response message for QueryCoreContractRegistry RPC.
message QueryCoreContractRegistryResponse { string address = 1; }

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}
